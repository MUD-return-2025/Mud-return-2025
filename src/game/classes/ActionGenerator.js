/**
 * @class ActionGenerator
 * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ.
 */
export class ActionGenerator {
  /**
   * @param {import('../GameEngine.js').GameEngine} game - –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞.
   */
  constructor(game) {
    this.game = game;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π.
   * @returns {Array<{
   *   isGeneral?: boolean,
   *   target?: { name: string, type: string },
   *   actions: Array<{label: string, command: string, danger?: boolean}>
   * }>}
   */
  getAvailableActions() {
    const groupedActions = [];
    const currentRoom = this.game.getCurrentRoom();
    if (!currentRoom) return [];

    // --- –ì—Ä—É–ø–ø–∞: –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    const baseActions = [
      { label: 'üëÅÔ∏è –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', command: 'look' },
      { label: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', command: 'save' },
      { label: '‚ùì –ü–æ–º–æ—â—å', command: 'help' }
    ];
    groupedActions.push({ isGeneral: true, actions: baseActions });

    // --- –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É NPC, –Ω–æ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∏—Ö –Ω–∞–ª–∏—á–∏—è ---
    const generalNpcActions = [];
    const npcsInRoom = currentRoom.npcs
      .map(npcId => this.game.getNpc(npcId, currentRoom.area))
      .filter(npc => npc && npc.isAlive());

    if (npcsInRoom.some(npc => npc.canTrade && npc.canTrade())) {
      generalNpcActions.push({ label: 'üí∞ –¢–æ—Ä–≥–æ–≤–∞—Ç—å', command: 'list' });
    }
    if (npcsInRoom.some(npc => npc.canHeal)) {
      generalNpcActions.push({ label: '‚ú® –ò—Å—Ü–µ–ª–∏—Ç—å—Å—è', command: 'heal' });
    }
    if (generalNpcActions.length > 0) {
      groupedActions.push({ isGeneral: true, actions: generalNpcActions });
    }

    // --- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É ---
    currentRoom.items
      .map(globalItemId => this.game.world.items.get(globalItemId))
      .filter(Boolean)
      .forEach(item => {
        groupedActions.push({
          target: { name: item.name, type: 'item-name' },
          actions: [
            { label: `üëÅÔ∏è –û—Å–º–æ—Ç—Ä–µ—Ç—å`, command: `look ${item.name}` },
            { label: `ü§î –û—Ü–µ–Ω–∏—Ç—å`, command: `consider ${item.name}` },
            { label: `‚úã –í–∑—è—Ç—å`, command: `get ${item.name}` }
          ]
        });
      });

    // --- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É NPC ---
    for (const npc of npcsInRoom) {
      const specificNpcActions = [];
      specificNpcActions.push({ label: `üëÅÔ∏è –û—Å–º–æ—Ç—Ä–µ—Ç—å`, command: `look ${npc.name}` });
      specificNpcActions.push({ label: `ü§î –û—Ü–µ–Ω–∏—Ç—å`, command: `consider ${npc.name}` });
      if (npc.dialogue && npc.dialogue.length > 0) {
        specificNpcActions.push({ label: `üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å`, command: `talk ${npc.name}` });
      }
      if (npc.type === 'hostile') {
        specificNpcActions.push({ label: `‚öîÔ∏è –£–±–∏—Ç—å`, command: `kill ${npc.name}`, danger: true });
      }
      groupedActions.push({
        target: { name: npc.name, type: `npc-${npc.type}` },
        actions: specificNpcActions
      });
    }

    return groupedActions;
  }
}
