import { DamageParser } from '../utils/damageParser.js';

/**
 * @class ConsiderationManager
 * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ NPC.
 */
export class ConsiderationManager {
  /**
   * @param {import('../GameEngine').GameEngine} game - –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞.
   */
  constructor(game) {
    this.game = game;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ NPC –ø–æ –∏–º–µ–Ω–∏.
   * @param {string} targetName - –ò–º—è —Ü–µ–ª–∏.
   * @returns {string} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏.
   */
  consider(targetName) {
    if (!targetName) {
      return '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å? (consider <–ø—Ä–µ–¥–º–µ—Ç/–Ω–ø—Å>)';
    }

    const target = targetName.toLowerCase();
    const currentRoom = this.game.getCurrentRoom();

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    let item = this.game.player.findItem(target);
    if (item) return this._getConsiderItemString(item);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ
    const globalItemId = currentRoom.findItem(target, this.game);
    if (globalItemId) {
      item = this.game.world.items.get(globalItemId);
      return this._getConsiderItemString(item);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —É —Ç–æ—Ä–≥–æ–≤—Ü–∞
    item = this.game._findItemInTraderShop(target);
    if (item) return this._getConsiderItemString(item);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º NPC –≤ –∫–æ–º–Ω–∞—Ç–µ
    const [currentAreaId] = this.game.world.parseGlobalId(this.game.player.currentRoom);
    const npcId = currentRoom.findNpc(target, this.game, currentAreaId);
    if (npcId) {
      const npc = this.game.getNpc(npcId, currentAreaId);
      return this._getConsiderNpcString(npc);
    }

    return `–í—ã –Ω–µ –≤–∏–¥–∏—Ç–µ "${targetName}" –∑–¥–µ—Å—å.`;
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞.
   * @param {object} item - –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.
   * @returns {string}
   * @private
   */
  _getConsiderItemString(item) {
    const c = this.game.colorize;
    const header = c(`---[ –û—Ü–µ–Ω–∫–∞: ${item.name} ]--------`, 'room-name');
    const footer = c('------------------------------------', 'room-name');

    const lines = [
      c(item.description, 'npc-neutral'),
      '',
      c('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', 'exit-name')
    ];

    if (item.type) lines.push(`  –¢–∏–ø: ${c(item.type, 'item-name')}`);
    if (item.damage) lines.push(`  ‚öîÔ∏è –£—Ä–æ–Ω: ${c(item.damage, 'combat-player-attack')}`);
    if (item.armor) lines.push(`  üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${c(item.armor, 'combat-exp-gain')}`);
    if (item.healAmount) lines.push(`  ‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ: ${c(item.healAmount, 'combat-exp-gain')}`);
    if (item.weight) lines.push(`  ‚öñÔ∏è –í–µ—Å: ${c(item.weight, 'npc-neutral')}`);
    if (item.value) lines.push(`  üí∞ –¶–µ–Ω–Ω–æ—Å—Ç—å: ${c(item.value, 'exit-name')} –∑–æ–ª–æ—Ç–∞`);

    let result = [header, ...lines].join('\n');
    
    if (item.type === 'weapon') {
      result += this.game._compareEquipment(item, this.game.player.equippedWeapon, '–û—Ä—É–∂–∏–µ');
    } else if (item.type === 'armor') {
      result += this.game._compareEquipment(item, this.game.player.equippedArmor, '–ë—Ä–æ–Ω—è');
    }
    
    result += `\n${footer}`;
    return result;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –≤ –±–æ—é —Å NPC.
   * @param {import('./NPC').NPC} npc - –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫.
   * @returns {string}
   * @private
   */
  _getConsiderNpcString(npc) {
    const c = this.game.colorize;
    const header = c(`---[ –û—Ü–µ–Ω–∫–∞: ${npc.name} ]--------`, 'room-name');
    const footer = c('------------------------------------', 'room-name');

    const lines = [
      c(npc.description, 'npc-neutral'),
      '',
      c('–û—Ü–µ–Ω–∫–∞ —Å–∏–ª:', 'exit-name')
    ];

    const playerHp = this.game.player.hitPoints;
    const playerAvgDamage = this.game._calculateAvgPlayerDamage();
    const npcHp = npc.hitPoints;
    const npcAvgDamage = new DamageParser(npc.damage).avg();

    if (playerAvgDamage <= 0) return [header, ...lines, '  –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω.', footer].join('\n');
    if (npcAvgDamage <= 0) return [header, ...lines, `  –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω. ${c('–õ–µ–≥–∫–∞—è –ø–æ–±–µ–¥–∞', 'combat-exp-gain')}.`, footer].join('\n');

    const roundsToKillNpc = Math.ceil(npcHp / playerAvgDamage);
    const roundsToKillPlayer = Math.ceil(playerHp / npcAvgDamage);

    lines.push(`  –í–∞—à —É—Ä–æ–Ω/—Ä–∞—É–Ω–¥ (—Å—Ä–µ–¥–Ω–∏–π): ${c(playerAvgDamage.toFixed(1), 'combat-player-attack')}`);
    lines.push(`  –£—Ä–æ–Ω –≤—Ä–∞–≥–∞/—Ä–∞—É–Ω–¥ (—Å—Ä–µ–¥–Ω–∏–π): ${c(npcAvgDamage.toFixed(1), 'combat-npc-attack')}`);
    lines.push(`  –†–∞—É–Ω–¥–æ–≤ –¥–æ –ø–æ–±–µ–¥—ã: ~${c(roundsToKillNpc, 'combat-player-attack')}`);
    lines.push(`  –†–∞—É–Ω–¥–æ–≤ –¥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: ~${c(roundsToKillPlayer, 'combat-npc-attack')}`);

    const ratio = roundsToKillPlayer / roundsToKillNpc;
    let conclusion = '';
    let conclusionColor = 'npc-neutral';

    if (ratio > 2.5) { conclusion = '–õ–µ–≥–∫–∞—è –ø–æ–±–µ–¥–∞.'; conclusionColor = 'combat-exp-gain'; }
    else if (ratio > 1.5) { conclusion = '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –ø–æ–±–µ–¥–∏—Ç–µ.'; conclusionColor = 'exit-name'; }
    else if (ratio >= 0.9) { conclusion = '–¢—è–∂–µ–ª—ã–π –±–æ–π, —à–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã.'; conclusionColor = 'combat-player-attack'; }
    else if (ratio > 0.6) { conclusion = '–û—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ.'; conclusionColor = 'combat-npc-attack'; }
    else { conclusion = '–ë–µ–≥–∏—Ç–µ! –£ –≤–∞—Å –Ω–µ—Ç —à–∞–Ω—Å–æ–≤.'; conclusionColor = 'combat-player-death'; }

    lines.push(`\n${c('–í–µ—Ä–¥–∏–∫—Ç:', 'exit-name')} ${c(conclusion, conclusionColor)}`);
    return [header, ...lines, footer].join('\n');
  }
}