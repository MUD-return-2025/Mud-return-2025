import { DamageParser } from '../utils/damageParser.js';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ NPC. –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑.
 */
const NPC_CONSIDER_THRESHOLDS = [
  { threshold: 2.5, text: '–õ–µ–≥–∫–∞—è –ø–æ–±–µ–¥–∞.', color: 'combat-exp-gain' },
  { threshold: 1.5, text: '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –ø–æ–±–µ–¥–∏—Ç–µ.', color: 'exit-name' },
  { threshold: 0.9, text: '–¢—è–∂–µ–ª—ã–π –±–æ–π, —à–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã.', color: 'combat-player-attack' },
  { threshold: 0.6, text: '–û—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ.', color: 'combat-npc-attack' },
  { threshold: 0, text: '–ë–µ–≥–∏—Ç–µ! –£ –≤–∞—Å –Ω–µ—Ç —à–∞–Ω—Å–æ–≤.', color: 'combat-player-death' },
];

/**
 * –¢–µ–∫—Å—Ç—ã –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–µ—Ä–¥–∏–∫—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏.
 */
const EQUIPMENT_COMPARE_VERDICTS = {
  better: { text: '–ª—É—á—à–µ', color: 'combat-exp-gain' },
  worse: { text: '—Ö—É–∂–µ', color: 'combat-npc-death' },
  equal: { text: '–í —Ü–µ–ª–æ–º, –æ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã.' },
};

/**
 * @class ConsiderationManager
 * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ NPC.
 */
export class ConsiderationManager {
  /**
   * @param {import('../GameEngine').GameEngine} game - –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞.
   */
  constructor(game) {
    this.game = game;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ NPC –ø–æ –∏–º–µ–Ω–∏.
   * @param {string} targetName - –ò–º—è —Ü–µ–ª–∏.
   * @returns {string} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏.
   */
  consider(targetName) {
    if (!targetName) {
      return '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å? (consider <–ø—Ä–µ–¥–º–µ—Ç/–Ω–ø—Å>)';
    }

    const foundTarget = this.game.findTargetByName(targetName);

    if (!foundTarget) {
      return `–í—ã –Ω–µ –≤–∏–¥–∏—Ç–µ "${targetName}" –∑–¥–µ—Å—å.`;
    }

    switch (foundTarget.type) {
      case 'item':
        return this._getConsiderItemString(foundTarget.entity);
      case 'npc':
        return this._getConsiderNpcString(foundTarget.entity);
      default:
        return `–í—ã –Ω–µ –≤–∏–¥–∏—Ç–µ "${targetName}" –∑–¥–µ—Å—å.`;
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞.
   * @param {object} item - –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.
   * @returns {string}
   * @private
   */
  _getConsiderItemString(item) {
    const c = this.game.colorize;
    const header = c(`---[ –û—Ü–µ–Ω–∫–∞: ${item.name} ]--------`, 'room-name');
    const footer = c('------------------------------------', 'room-name');

    const lines = [
      c(item.description, 'npc-neutral'),
      '',
      c('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', 'exit-name')
    ];

    if (item.type) lines.push(`  –¢–∏–ø: ${c(item.type, 'item-name')}`);
    if (item.damage) lines.push(`  ‚öîÔ∏è –£—Ä–æ–Ω: ${c(item.damage, 'combat-player-attack')}`);
    if (item.armor) lines.push(`  üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${c(item.armor, 'combat-exp-gain')}`);
    if (item.healAmount) lines.push(`  ‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ: ${c(item.healAmount, 'combat-exp-gain')}`);
    if (item.weight) lines.push(`  ‚öñÔ∏è –í–µ—Å: ${c(item.weight, 'npc-neutral')}`);
    if (item.value) lines.push(`  üí∞ –¶–µ–Ω–Ω–æ—Å—Ç—å: ${c(item.value, 'exit-name')} –∑–æ–ª–æ—Ç–∞`);

    let result = [header, ...lines].join('\n');
    
    if (item.type === 'weapon') {
      result += this._compareEquipment(item, this.game.player.equippedWeapon, '–û—Ä—É–∂–∏–µ');
    } else if (item.type === 'armor') {
      result += this._compareEquipment(item, this.game.player.equippedArmor, '–ë—Ä–æ–Ω—è');
    }
    
    result += `\n${footer}`;
    return result;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –≤ –±–æ—é —Å NPC.
   * @param {import('./NPC').NPC} npc - –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫.
   * @returns {string}
   * @private
   */
  _getConsiderNpcString(npc) {
    const c = this.game.colorize;
    const header = c(`---[ –û—Ü–µ–Ω–∫–∞: ${npc.name} ]--------`, 'room-name');
    const footer = c('------------------------------------', 'room-name');

    const lines = [
      c(npc.description, 'npc-neutral'),
      '',
      c('–û—Ü–µ–Ω–∫–∞ —Å–∏–ª:', 'exit-name')
    ];

    const playerHp = this.game.player.hitPoints;
    const playerAvgDamage = this.game._calculateAvgPlayerDamage();
    const npcHp = npc.hitPoints;
    const npcAvgDamage = new DamageParser(npc.damage).avg();

    if (playerAvgDamage <= 0) return [header, ...lines, '  –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω.', footer].join('\n');
    if (npcAvgDamage <= 0) return [header, ...lines, `  –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω. ${c('–õ–µ–≥–∫–∞—è –ø–æ–±–µ–¥–∞', 'combat-exp-gain')}.`, footer].join('\n');

    const roundsToKillNpc = Math.ceil(npcHp / playerAvgDamage);
    const roundsToKillPlayer = Math.ceil(playerHp / npcAvgDamage);

    lines.push(`  –í–∞—à —É—Ä–æ–Ω/—Ä–∞—É–Ω–¥ (—Å—Ä–µ–¥–Ω–∏–π): ${c(playerAvgDamage.toFixed(1), 'combat-player-attack')}`);
    lines.push(`  –£—Ä–æ–Ω –≤—Ä–∞–≥–∞/—Ä–∞—É–Ω–¥ (—Å—Ä–µ–¥–Ω–∏–π): ${c(npcAvgDamage.toFixed(1), 'combat-npc-attack')}`);
    lines.push(`  –†–∞—É–Ω–¥–æ–≤ –¥–æ –ø–æ–±–µ–¥—ã: ~${c(roundsToKillNpc, 'combat-player-attack')}`);
    lines.push(`  –†–∞—É–Ω–¥–æ–≤ –¥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: ~${c(roundsToKillPlayer, 'combat-npc-attack')}`);

    const ratio = roundsToKillPlayer / roundsToKillNpc;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const verdict = NPC_CONSIDER_THRESHOLDS.find(v => ratio >= v.threshold) 
      || NPC_CONSIDER_THRESHOLDS[NPC_CONSIDER_THRESHOLDS.length - 1];

    lines.push(`\n${c('–í–µ—Ä–¥–∏–∫—Ç:', 'exit-name')} ${c(verdict.text, verdict.color)}`);

    return [header, ...lines, footer].join('\n');
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏.
   * @param {object} newItem - –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç.
   * @param {object} equippedItem - –ù–∞–¥–µ—Ç—ã–π –ø—Ä–µ–¥–º–µ—Ç.
   * @param {string} itemTypeName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–û—Ä—É–∂–∏–µ/–ë—Ä–æ–Ω—è).
   * @returns {string}
   * @private
   */
  _compareEquipment(newItem, equippedItem, itemTypeName) {
    const c = this.game.colorize;
    if (!equippedItem) {
      return `\n\n${c('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', 'exit-name')}\n  –£ –≤–∞—Å –Ω–µ –Ω–∞–¥–µ—Ç–æ: ${itemTypeName}.`;
    }

    let comparison = `\n\n${c('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞–¥–µ—Ç—ã–º', 'exit-name')} (${c(equippedItem.name, 'item-name')}):\n`;
    let better = 0;
    let worse = 0;
    
    const compareStat = (name, newItemStat, equippedItemStat, lowerIsBetter = false) => {
      if (newItemStat === equippedItemStat) return `  ${name}: ${newItemStat.toFixed(1)} (=)\n`;
      
      const isBetter = lowerIsBetter ? newItemStat < equippedItemStat : newItemStat > equippedItemStat;
      const diff = newItemStat - equippedItemStat;
      const diffStr = diff > 0 ? `+${diff.toFixed(1)}` : `${diff.toFixed(1)}`;

      if (isBetter) {
        better++;
        return `  ${name}: ${newItemStat.toFixed(1)} (${c(diffStr, 'combat-exp-gain')})\n`;
      } else {
        worse++;
        return `  ${name}: ${newItemStat.toFixed(1)} (${c(diffStr, 'combat-npc-death')})\n`;
      }
    };

    if (newItem.damage && equippedItem.damage) {
      const newItemDamage = new DamageParser(newItem.damage).avg();
      const equippedItemDamage = new DamageParser(equippedItem.damage).avg();
      comparison += compareStat('–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω', newItemDamage, equippedItemDamage);
    }
    if (newItem.armor != null && equippedItem.armor != null) {
      comparison += compareStat('–ó–∞—â–∏—Ç–∞', newItem.armor || 0, equippedItem.armor || 0);
    }

    comparison += compareStat('–í–µ—Å', newItem.weight || 0, equippedItem.weight || 0, true);
    comparison += `  –¶–µ–Ω–Ω–æ—Å—Ç—å: ${newItem.value || 0} (=)\n`;

    if (better > worse) {
      const { text, color } = EQUIPMENT_COMPARE_VERDICTS.better;
      comparison += `\n${c('–í–µ—Ä–¥–∏–∫—Ç:', 'exit-name')} –í —Ü–µ–ª–æ–º, —ç—Ç–æ ${c(text, color)}, —á–µ–º —Ç–æ, —á—Ç–æ –Ω–∞ –≤–∞—Å –Ω–∞–¥–µ—Ç–æ.`;
    } else if (worse > better) {
      const { text, color } = EQUIPMENT_COMPARE_VERDICTS.worse;
      comparison += `\n${c('–í–µ—Ä–¥–∏–∫—Ç:', 'exit-name')} –í —Ü–µ–ª–æ–º, —ç—Ç–æ ${c(text, color)}, —á–µ–º —Ç–æ, —á—Ç–æ –Ω–∞ –≤–∞—Å –Ω–∞–¥–µ—Ç–æ.`;
    } else {
      const { text } = EQUIPMENT_COMPARE_VERDICTS.equal;
      comparison += `\n${c('–í–µ—Ä–¥–∏–∫—Ç:', 'exit-name')} ${text}`;
    }

    return comparison;
  }
}